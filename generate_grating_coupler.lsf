# Lumerical FDTD Script for Apodized Grating Coupler Generation
# Generated for Zhao & Fan (2020) paper reproduction
# Author: Claude Code
# Compatible with: Lumerical FDTD Solutions

# Clear all existing objects
deleteall;

# =============================================================================
# SIMULATION PARAMETERS
# =============================================================================

# Material parameters (from paper)
wavelength = 1.55e-6;        # Operating wavelength [m]
n_si = 3.48;                 # Silicon refractive index at 1550nm
n_sio2 = 1.44;              # Silicon dioxide refractive index
n_air = 1.0;                # Air refractive index

# Geometry parameters (from paper)
si_thickness = 220e-9;       # Silicon slab thickness [m]
etch_depth = 70e-9;          # Grating etch depth [m]  
box_thickness = 2e-6;        # Buried oxide thickness [m]
pml_thickness = 0.5e-6;      # PML boundary thickness [m]

# Simulation domain
sim_x_span = 20e-6;          # X span [m]
sim_y_span = 3e-6;           # Y span [m] 
sim_z_span = 8e-6;           # Z span [m]

mesh_accuracy = 4;           # Mesh accuracy (1-8, higher = finer)

# =============================================================================
# READ GEOMETRY DATA
# =============================================================================

# Import geometry from CSV file generated by Python script
filename = "grating_coupler_geometry.csv";

if(fileexists(filename)) {
    ?filename + " found. Reading grating geometry data...";
    
    # Read CSV data
    grating_data = readdata(filename);
    
    # Extract columns (assuming specific column order from Python export)
    trench_numbers = grating_data(2:end,1);       # Skip header row
    positions_um = grating_data(2:end,2);         # Position in micrometers
    etch_lengths_um = grating_data(2:end,3);      # Etch length in micrometers
    depths_um = grating_data(2:end,9);            # Depth in micrometers
    
    # Convert to meters
    positions_m = positions_um * 1e-6;
    etch_lengths_m = etch_lengths_um * 1e-6;
    depths_m = depths_um * 1e-6;
    
    num_trenches = length(positions_m);
    ?"Number of trenches to generate: " + num2str(num_trenches);
    
} else {
    ?"Error: Geometry file " + filename + " not found.";
    ?"Please run the Python script first to generate geometry data.";
    break;
}

# =============================================================================
# CREATE SIMULATION REGION
# =============================================================================

# Add FDTD simulation region
addfdtd;
set("dimension", "3D");
set("x", 0);
set("x span", sim_x_span);
set("y", 0);
set("y span", sim_y_span);
set("z", 0);
set("z span", sim_z_span);

# Boundary conditions
set("x min bc", "PML");
set("x max bc", "PML");
set("y min bc", "PML");
set("y max bc", "PML");
set("z min bc", "PML"); 
set("z max bc", "PML");

# Mesh settings
set("mesh accuracy", mesh_accuracy);
set("use early shutoff", true);
set("auto shutoff min", 1e-5);

# =============================================================================
# CREATE MATERIAL STACK
# =============================================================================

# Silicon substrate (not needed for SOI, but good reference)
addrect;
set("name", "substrate");
set("x", 0);
set("x span", sim_x_span);
set("y", 0);
set("y span", sim_y_span);
set("z", -box_thickness - 0.5e-6);
set("z span", 1e-6);
set("material", "Si (Silicon) - Palik");

# Buried oxide layer
addrect;
set("name", "buried_oxide");
set("x", 0);
set("x span", sim_x_span);
set("y", 0);
set("y span", sim_y_span);
set("z", -box_thickness/2);
set("z span", box_thickness);
set("material", "SiO2 (Glass) - Palik");

# Silicon slab (unetched)
addrect;
set("name", "silicon_slab");
set("x", 0);
set("x span", sim_x_span);
set("y", 0);
set("y span", sim_y_span);
set("z", si_thickness/2);
set("z span", si_thickness);
set("material", "Si (Silicon) - Palik");

# Top cladding (SiO2)
addrect;
set("name", "top_cladding");
set("x", 0);
set("x span", sim_x_span);
set("y", 0);
set("y span", sim_y_span);
set("z", si_thickness + 2e-6);
set("z span", 4e-6);
set("material", "SiO2 (Glass) - Palik");

?"Material stack created successfully.";

# =============================================================================
# CREATE GRATING TRENCHES
# =============================================================================

?"Creating grating trenches...";

for(i=1:num_trenches) {
    
    # Get parameters for current trench
    pos = positions_m(i);
    length = etch_lengths_m(i);
    depth = depths_m(i);
    
    # Create trench as a rectangle that subtracts from silicon
    addrect;
    set("name", "trench_" + num2str(i));
    
    # Position the trench
    set("x", pos + length/2);        # Center at position + half length
    set("x span", length);           # Width = etch length
    set("y", 0);                     # Centered in Y
    set("y span", sim_y_span);       # Full width in Y direction
    set("z", si_thickness - depth/2); # Top surface minus half depth
    set("z span", depth);            # Height = etch depth
    
    # Set as SiO2 to create the "etched" region
    set("material", "SiO2 (Glass) - Palik");
    
    if(mod(i,10) == 0) {
        ?"Created " + num2str(i) + "/" + num2str(num_trenches) + " trenches...";
    }
}

?"All " + num2str(num_trenches) + " grating trenches created successfully.";

# =============================================================================
# ADD SOURCE
# =============================================================================

# Add waveguide mode source for forward simulation
addmode;
set("name", "waveguide_source");
set("injection axis", "x-axis");
set("direction", "forward");
set("x", -sim_x_span/2 + 2e-6);     # Position near left boundary
set("y", 0);
set("y span", 2e-6);                # Span covers waveguide width
set("z", si_thickness/2);           # Center in silicon slab
set("z span", si_thickness + 0.2e-6); # Slightly larger than slab

# Set wavelength and mode properties
set("wavelength start", wavelength);
set("wavelength stop", wavelength);
set("mode selection", "fundamental TE mode");

?"Source added successfully.";

# =============================================================================
# ADD MONITORS
# =============================================================================

# Far-field monitor for radiation pattern
addfarfield2d;
set("name", "farfield_monitor");
set("monitor type", "2D Z-normal");
set("x", 0);
set("x span", sim_x_span - 2e-6);
set("y", 0);
set("y span", sim_y_span - 2e-6);
set("z", si_thickness + 1e-6);      # Above the grating

# Field monitor at grating surface
addpower;
set("name", "grating_surface");
set("monitor type", "2D Z-normal");
set("x", 0);
set("x span", sim_x_span - 2e-6);
set("y", 0);
set("y span", sim_y_span - 2e-6);
set("z", si_thickness);             # At top of silicon slab

# Transmission monitor
addpower;
set("name", "transmission");
set("monitor type", "2D X-normal");
set("x", sim_x_span/2 - 1e-6);      # Near right boundary
set("y", 0);
set("y span", 2e-6);
set("z", si_thickness/2);
set("z span", si_thickness + 0.2e-6);

?"Monitors added successfully.";

# =============================================================================
# OPTIMIZATION MESH (for grating region)
# =============================================================================

# Add mesh override for grating region
addmesh;
set("name", "grating_mesh");
set("x", (positions_m(1) + positions_m(num_trenches))/2);  # Center of grating
set("x span", positions_m(num_trenches) - positions_m(1) + 2e-6); # Grating span + buffer
set("y", 0);
set("y span", 1e-6);
set("z", si_thickness/2);
set("z span", si_thickness + 0.5e-6);

# Set fine mesh for accurate grating simulation
set("dx", min(etch_lengths_m)/8);    # At least 8 points per smallest feature
set("dy", 25e-9);                    # 25 nm in y direction
set("dz", 10e-9);                    # 10 nm in z direction

?"Mesh override added for grating region.";

# =============================================================================
# SIMULATION SETUP COMPLETE
# =============================================================================

?"";
?"========================================================";
?"GRATING COUPLER SETUP COMPLETE";
?"========================================================";
?"Simulation parameters:";
?" - Wavelength: " + num2str(wavelength*1e9) + " nm";
?" - Silicon thickness: " + num2str(si_thickness*1e9) + " nm";
?" - Etch depth: " + num2str(etch_depth*1e9) + " nm";
?" - Number of trenches: " + num2str(num_trenches);
?" - Grating length: " + num2str((positions_m(num_trenches) - positions_m(1))*1e6) + " Î¼m";
?"";
?"To run simulation:";
?" 1. Review setup in Layout view";
?" 2. Check mesh in Mesh view";
?" 3. Run simulation";
?" 4. Analyze results from monitors";
?"";
?"For coupling efficiency analysis:";
?" 1. Calculate far-field pattern from farfield_monitor";
?" 2. Analyze transmission through transmission monitor";  
?" 3. Compare with target Gaussian beam profile";
?"========================================================";

# =============================================================================
# ANALYSIS FUNCTIONS
# =============================================================================

# Add analysis script snippet
analysis_script = "
# Post-simulation analysis
# Run this after the simulation completes

# Get far-field data
ff_data = getresult('farfield_monitor', 'farfield');
theta = ff_data.theta;
E_ff = ff_data.E;

# Calculate coupling efficiency
target_angle = 6.9 * pi/180;  # Target angle in radians
angle_idx = find(theta, target_angle);  # Find closest angle
efficiency = abs(E_ff(angle_idx))^2;

?'Coupling efficiency at target angle: ' + num2str(efficiency);

# Plot far-field pattern
plot(theta*180/pi, abs(E_ff)^2, 'Angle (degrees)', 'Intensity', 'Far-field Pattern');
";

?"Analysis script prepared. Run the analysis_script variable content after simulation.";